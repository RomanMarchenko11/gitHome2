package concurrency;

public class BankAccount {
    /*
     Умова змагання (race condition) виникає, коли два або більше потоки одночасно читають або записують одні і ті ж дані
     і кінцевий результат залежить від порядку, в якому ці операції виконуються.

     Розгляньмо простий приклад. Допустимо, у вас є банківський рахунок з балансом 100 доларів.
     У вас є два потоки, один виконує операцію зняття 70 доларів, а інший - 60 доларів.
     Обидва перевіряють баланс, бачать, що 100 доларів доступні, і проводять транзакції.
     В результаті ваш баланс становить -30 доларів, хоча жодна з транзакцій окремо не перевищила баланс. Це є прикладом умови змагання.

    У Java умови змагання можуть бути вирішені за допомогою синхронізації.
    У вищенаведеному прикладі ми можемо синхронізувати доступ до балансу,
    використовуючи ключове слово synchronized або блокування з пакету java.util.concurrent.locks.
    Це гарантує, що тільки один потік в будь-який час може оновити баланс, уникнувши таким чином умов змагання.
     */
    private int balance = 100;
    public synchronized void withdraw(int amount) {
//    public void withdraw(int amount) {
        if (balance >= amount) {
            balance -= amount;
            System.out.println("Withdraw " + amount + ", new balance: " + balance);
        } else {
            System.out.println("There is not enough money on the balance to withdraw. Current balance: " + balance);
        }
    }
}
